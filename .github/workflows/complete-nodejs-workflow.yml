name: Complete Node.js Workflow CI/CD Pipeline

on:
    push:
        branches: [ main, development ]
    pull_request:
        branches: [ main ]
    schedule:
        - cron: '0 6 * * 1' # Weekly health check

env:
    NODE_ENV: '20'

jobs:
    # Job 1: Code Quality Checks

    lint-and-format:
        name: Code Quality Checks
        runs-on: ubuntu-latest


        strategy:
            matrix:
                node-version: [ 16, 18, 20] 
    

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                node-version: ${{ matrix.node-version }}
                cache: 'npm'
            
            - name: Install dependencies
              run: npm ci

            - name: Run ESLint
              run: npm run lint
              continue-on-error: true

            - name: Check code formatting
              run: npm run format:check
              continue-on-error: true
        
    # Job 2: Unit Tests
    test:
        name: Test suite
        runs-on: ubuntu-latest
        needs: lint-and-format

        strategy:
            matrix:
                node-version: [ 16, 18, 20]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                node-version: ${{ matrix.node-version }}
                cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Run unit tests
              run: npm test
              env:
                NODE_ENV: test

            - name: Generate test coverage report
              run: npm run test:coverage
              if: matrix.node-version == 20

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              if: matrix.node-version == 16

    # Job 3: Security Checks
    security:
        name: Security checks
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                node-version: ${{ env.NODE_ENV }}
                cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Run security audit
              run: npm audit --audit-level=high

            - name: Check for vulnerabilities
              run: npm audit --json > audit-result.json
              continue-on-error: true
            
            - name: Upload audit results
              uses: actions/upload-artifact@v3
              with:
                name: security-audit-results
                path: audit-result.json
            
    # Job 4: Build and  Deploy

    build-and-deploy:
        name: Build and Deploy
        runs-on: ubuntu-latest
        needs: [ lint-and-format, test, security]
        if: github.ref == 'refs/heads/main'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                node-version: ${{ env.Node_ENV }}
                cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Build application
              run: npm run build
              env:
                NODE_ENV: production

            - name: Create deployment artifact
              run: tar -czf deployment.tar.gz dist/ package.json package-lock.json

            - name: Upload build artifact
              uses: actions/upload-artifact@v3
              with:
                name: deployment-package
                path: deployment.tar.gz

            - name: Deploy to staging
              run: |
                echo "Deploying to staging environment..."
                echo "Build completed successfully." 
                echo "Deployment artifact is ready for staging." 



            - name: Notify deployment success
              run: |
                echo "Deployment to staging environment completed successfully."
                echo "Build artifact is available for further testing."
            

            
